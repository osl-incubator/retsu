{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#retsu","title":"Retsu","text":"<p>Retsu aims to wrap-up Celery in way to facilitate to create parallel and serial tasks</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://retsu.github.io</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>The security of our code: Bandit is a powerful tool that we use in our Python   project to ensure its security. This tool analyzes the code and detects   potential vulnerabilities. Some of the key features of Bandit are its ease of   use, its ability to integrate with other tools, and its support for multiple   Python versions. If you want to know about bandit you can check its   documentation.</p> </li> <li> <p>Finds unused code: Vulture is   useful for cleaning up and finding errors in large code bases in Python.</p> </li> <li> <p>Complexity of functions and modules: We use   McCabe to identify the complexity in our   Python code that may be difficult to maintain or understand. By identifying   complex code at the outset, we as developers can refactor it to make it easier   to maintain and understand. In summary, McCabe helps us to improve the quality   of our code and make it easier to maintain. If you would like to learn more   about McCabe and code complexity, you can visit   McCabe - Code Complexity Checker.   This tool is included with Flake8.</p> </li> <li> <p>TODO</p> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the osl-incubator/scicookie project template.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#002-2024-05-28","title":"0.0.2 (2024-05-28)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix documentation build step (#3) (1244e73)</li> <li>Fix issue with semantic-release version pattern (#4) (6ce350a)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout.</p> <p>This project uses the src layout, which means that the package code is located at <code>./src/retsu</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xmnlab/retsu.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Retsu could always use more documentation, whether as part of the official Retsu docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xmnlab/retsu.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>retsu</code> for local development.</p> <ol> <li>Fork the <code>retsu</code> repo on GitHub.</li> <li>Clone your fork locally and change to the directory of your project:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/retsu.git\n$ cd retsu/\n</code></pre> <p>Also, create a remote to the upstream repository, you will need that later:</p> <pre><code>$ git remote add upstream https://github.com/xmnlab/retsu.git\n$ git fetch --all\n</code></pre> <ol> <li>Prepare and use virtual environment: If you don't have yet conda installed     in your machine, you can check the installation steps here:     conda-forge/miniforge?tab=readme-ov-file#download After     that, ensure that conda is already available in your terminal session and     run:</li> </ol> <pre><code>$ conda env create env create --file conda/dev.yaml\n$ conda activate retsu\n</code></pre> <p>Note: you can use <code>mamba env create</code> instead, if you have it already installed, in order to boost the installation step.</p> <ol> <li>Install the dependencies: Now, you can already install the dependencies for    the project:</li> </ol> <pre><code>$ poetry install\n</code></pre> <ol> <li><code>retsu</code> uses a set of <code>pre-commit</code> hooks to improve code quality. The hooks     can be installed locally using:</li> </ol> <pre><code>$ pre-commit install\n</code></pre> <p>This would run the checks every time a <code>git commit</code> is executed locally. Usually, the verification will only run on the files modified by that commit, but the verification can also be triggered for all the files using:</p> <pre><code>$ pre-commit run --all-files\n</code></pre> <p>If you would like to skip the failing checks and push the code for further discussion, use the <code>--no-verify</code> option with <code>git commit</code>.</p> <ol> <li>This project uses <code>pytest</code> as a testing tool. <code>pytest</code> is responsible for     testing the code, whose configuration is available in pyproject.toml.     Additionally, this project also uses <code>pytest-cov</code> to calculate the coverage     of these unit tests. For more information, check the section about tests     later in this document.</li> <li>Commit your changes and push your branch to GitHub::</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#running-tests-locally","title":"Running tests locally","text":"<p>The tests can be executed using the <code>test</code> dependencies of <code>retsu</code> in the following way:</p> <pre><code>$ python -m pytest\n</code></pre>"},{"location":"contributing/#running-tests-with-coverage-locally","title":"Running tests with coverage locally","text":"<p>The coverage value can be obtained while running the tests using <code>pytest-cov</code> in the following way:</p> <pre><code>$ python -m pytest --cov=retsu tests/\n</code></pre> <p>A much more detailed guide on testing with <code>pytest</code> is available here.</p>"},{"location":"contributing/#automation-tasks-with-makim","title":"Automation Tasks with Makim","text":"<p>This project uses <code>makim</code> as an automation tool. Please, check the <code>.makim.yaml</code> file to check all the tasks available or run:</p> <pre><code>$ makim --help\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>Note: For a breaking change release, uses <code>!</code> at the end of the message prefix.</p> <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"Retsu","text":"In\u00a0[\u00a0]: Copied! <pre>import retsu\n</pre> import retsu In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#retsu","title":"Retsu\u00b6","text":"<p>Retsu is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Retsu, run this command in your terminal:</p> <pre><code>$ pip install retsu\n</code></pre> <p>This is the preferred method to install Retsu, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for Retsu can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/xmnlab/retsu.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/xmnlab/retsu.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/","title":"Index","text":""},{"location":"api/#retsu","title":"retsu","text":"<p>Retsu.</p>"},{"location":"api/#retsu.ParallelTask","title":"ParallelTask","text":"<pre><code>ParallelTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Initialize a parallel task object.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize ParallelTask.\"\"\"\n    if workers &lt;= 1:\n        raise Exception(\"ParallelTask should have more than 1 worker.\")\n\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/#retsu.ParallelTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/#retsu.ParallelTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/#retsu.ParallelTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/#retsu.ParallelTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/#retsu.ParallelTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/#retsu.ParallelTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/#retsu.ParallelTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/#retsu.ResultTask","title":"ResultTask","text":"<pre><code>ResultTask(result_path: Path)\n</code></pre> <p>Result from a task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path) -&gt; None:\n    \"\"\"Initialize ResultTask.\"\"\"\n    self.result_path = result_path\n</code></pre>"},{"location":"api/#retsu.ResultTask.get","title":"get","text":"<pre><code>get(task_id: str) -&gt; Any\n</code></pre> <p>Return the result for given task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get(self, task_id: str) -&gt; Any:\n    \"\"\"Return the result for given task.\"\"\"\n    if not self.status(task_id):\n        return {\"status\": False, \"message\": \"Result not ready.\"}\n\n    return self.load(task_id)\n</code></pre>"},{"location":"api/#retsu.ResultTask.load","title":"load","text":"<pre><code>load(task_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Load the result from a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef load(self, task_id: str) -&gt; dict[str, Any]:\n    \"\"\"Load the result from a file.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    if not result_file.exists():\n        raise Exception(f\"File {result_file} doesn't exist.\")\n    with open(result_file, \"r\") as f:\n        return cast(dict[str, Any], json.load(f))\n</code></pre>"},{"location":"api/#retsu.ResultTask.save","title":"save","text":"<pre><code>save(task_id: str, result: Any) -&gt; None\n</code></pre> <p>Save the result in a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef save(self, task_id: str, result: Any) -&gt; None:\n    \"\"\"Save the result in a file.\"\"\"\n    with open(self.result_path / f\"{task_id}.json\", \"w\") as f:\n        json.dump(\n            {\"task_id\": task_id, \"result\": result},\n            f,\n            indent=2,\n        )\n</code></pre>"},{"location":"api/#retsu.ResultTask.status","title":"status","text":"<pre><code>status(task_id: str) -&gt; bool\n</code></pre> <p>Return if the result for a given task was already stored.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef status(self, task_id: str) -&gt; bool:\n    \"\"\"Return if the result for a given task was already stored.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    return result_file.exists()\n</code></pre>"},{"location":"api/#retsu.SerialTask","title":"SerialTask","text":"<pre><code>SerialTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Serial Task class.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize a serial task object.\"\"\"\n    if workers != 1:\n        warnings.warn(\n            \"SerialTask should have just 1 worker. \"\n            \"Switching automatically to 1 ...\"\n        )\n        workers = 1\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/#retsu.SerialTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/#retsu.SerialTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/#retsu.SerialTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/#retsu.SerialTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/#retsu.SerialTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/#retsu.SerialTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/#retsu.SerialTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/#retsu.TaskManager","title":"TaskManager","text":"<pre><code>TaskManager()\n</code></pre> <p>Manage tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Create a list of retsu tasks.\"\"\"\n    self.tasks: dict[str, Task] = {}\n</code></pre>"},{"location":"api/#retsu.TaskManager.get_task","title":"get_task","text":"<pre><code>get_task(name: str) -&gt; Optional[Task]\n</code></pre> <p>Get a task with the given name.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_task(self, name: str) -&gt; Optional[Task]:\n    \"\"\"Get a task with the given name.\"\"\"\n    return self.tasks.get(name)\n</code></pre>"},{"location":"api/#retsu.TaskManager.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is starting ...\")\n        task.start()\n</code></pre>"},{"location":"api/#retsu.TaskManager.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is stopping ...\")\n        task.stop()\n</code></pre>"},{"location":"api/#retsu.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/retsu/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return \"0.0.2\"  # semantic-release\n</code></pre>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> retsu<ul> <li> celery</li> <li> core</li> <li> plugins<ul> <li> django</li> </ul> </li> </ul> </li> </ul>"},{"location":"api/celery/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> celery","text":""},{"location":"api/celery/#retsu.celery","title":"celery","text":"<p>Retsu tasks with celery.</p>"},{"location":"api/celery/#retsu.celery.CeleryTask","title":"CeleryTask","text":"<p>Celery Task class.</p>"},{"location":"api/celery/#retsu.celery.CeleryTask.get_chain_tasks","title":"get_chain_tasks","text":"<pre><code>get_chain_tasks(*args, **kwargs) -&gt; list[Signature]\n</code></pre> <p>Run tasks with chain.</p> Source code in <code>src/retsu/celery.py</code> <pre><code>def get_chain_tasks(  # type: ignore\n    self, *args, **kwargs\n) -&gt; list[celery.Signature]:\n    \"\"\"Run tasks with chain.\"\"\"\n    chain_tasks: list[celery.Signature] = []\n    return chain_tasks\n</code></pre>"},{"location":"api/celery/#retsu.celery.CeleryTask.get_chord_tasks","title":"get_chord_tasks","text":"<pre><code>get_chord_tasks(*args, **kwargs) -&gt; tuple[list[Signature], Optional[Signature]]\n</code></pre> <p>Run tasks with chord.</p> Return Source code in <code>src/retsu/celery.py</code> <pre><code>def get_chord_tasks(  # type: ignore\n    self, *args, **kwargs\n) -&gt; tuple[list[celery.Signature], Optional[celery.Signature]]:\n    \"\"\"\n    Run tasks with chord.\n\n    Return\n    ------\n    tuple:\n        list of tasks for the chord, and the task to be used as a callback\n    \"\"\"\n    chord_tasks: list[celery.Signature] = []\n    callback_task = None\n    return (chord_tasks, callback_task)\n</code></pre>"},{"location":"api/celery/#retsu.celery.CeleryTask.task","title":"task","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/celery.py</code> <pre><code>def task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    chord_tasks, chord_callback = self.get_chord_tasks(\n        *args, task_id=task_id, **kwargs\n    )\n    chain_tasks = self.get_chain_tasks(*args, task_id=task_id, **kwargs)\n\n    if chord_tasks:\n        if chord_callback:\n            workflow_chord = chord(chord_tasks, chord_callback)\n        else:\n            workflow_chord = chord(chord_tasks)\n        workflow_chord.apply_async()\n\n    if chain_tasks:\n        workflow_chain = chain(chord_tasks)\n        workflow_chain.apply_async()\n</code></pre>"},{"location":"api/celery/#retsu.celery.ParallelCeleryTask","title":"ParallelCeleryTask","text":"<pre><code>ParallelCeleryTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>CeleryTask</code>, <code>ParallelTask</code></p> <p>Parallel Task for Celery.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize ParallelTask.\"\"\"\n    if workers &lt;= 1:\n        raise Exception(\"ParallelTask should have more than 1 worker.\")\n\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/celery/#retsu.celery.SerialCeleryTask","title":"SerialCeleryTask","text":"<pre><code>SerialCeleryTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>CeleryTask</code>, <code>SerialTask</code></p> <p>Serial Task for Celery.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize a serial task object.\"\"\"\n    if workers != 1:\n        warnings.warn(\n            \"SerialTask should have just 1 worker. \"\n            \"Switching automatically to 1 ...\"\n        )\n        workers = 1\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/core/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> core","text":""},{"location":"api/core/#retsu.core","title":"core","text":"<p>Retsu core classes.</p>"},{"location":"api/core/#retsu.core.ParallelTask","title":"ParallelTask","text":"<pre><code>ParallelTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Initialize a parallel task object.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize ParallelTask.\"\"\"\n    if workers &lt;= 1:\n        raise Exception(\"ParallelTask should have more than 1 worker.\")\n\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/core/#retsu.core.ParallelTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/core/#retsu.core.ResultTask","title":"ResultTask","text":"<pre><code>ResultTask(result_path: Path)\n</code></pre> <p>Result from a task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path) -&gt; None:\n    \"\"\"Initialize ResultTask.\"\"\"\n    self.result_path = result_path\n</code></pre>"},{"location":"api/core/#retsu.core.ResultTask.get","title":"get","text":"<pre><code>get(task_id: str) -&gt; Any\n</code></pre> <p>Return the result for given task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get(self, task_id: str) -&gt; Any:\n    \"\"\"Return the result for given task.\"\"\"\n    if not self.status(task_id):\n        return {\"status\": False, \"message\": \"Result not ready.\"}\n\n    return self.load(task_id)\n</code></pre>"},{"location":"api/core/#retsu.core.ResultTask.load","title":"load","text":"<pre><code>load(task_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Load the result from a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef load(self, task_id: str) -&gt; dict[str, Any]:\n    \"\"\"Load the result from a file.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    if not result_file.exists():\n        raise Exception(f\"File {result_file} doesn't exist.\")\n    with open(result_file, \"r\") as f:\n        return cast(dict[str, Any], json.load(f))\n</code></pre>"},{"location":"api/core/#retsu.core.ResultTask.save","title":"save","text":"<pre><code>save(task_id: str, result: Any) -&gt; None\n</code></pre> <p>Save the result in a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef save(self, task_id: str, result: Any) -&gt; None:\n    \"\"\"Save the result in a file.\"\"\"\n    with open(self.result_path / f\"{task_id}.json\", \"w\") as f:\n        json.dump(\n            {\"task_id\": task_id, \"result\": result},\n            f,\n            indent=2,\n        )\n</code></pre>"},{"location":"api/core/#retsu.core.ResultTask.status","title":"status","text":"<pre><code>status(task_id: str) -&gt; bool\n</code></pre> <p>Return if the result for a given task was already stored.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef status(self, task_id: str) -&gt; bool:\n    \"\"\"Return if the result for a given task was already stored.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    return result_file.exists()\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask","title":"SerialTask","text":"<pre><code>SerialTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Serial Task class.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize a serial task object.\"\"\"\n    if workers != 1:\n        warnings.warn(\n            \"SerialTask should have just 1 worker. \"\n            \"Switching automatically to 1 ...\"\n        )\n        workers = 1\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/core/#retsu.core.SerialTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/core/#retsu.core.Task","title":"Task","text":"<pre><code>Task(result_path: Path, workers: int = 1)\n</code></pre> <p>Main class for handling a task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize a task object.\"\"\"\n    self.active = True\n    self.workers = workers\n    self.result = ResultTask(result_path)\n    self.queue_in: mp.Queue[Any] = mp.Queue()\n    self.processes: list[mp.Process] = []\n</code></pre>"},{"location":"api/core/#retsu.core.Task.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/core/#retsu.core.Task.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/core/#retsu.core.Task.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/core/#retsu.core.Task.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/core/#retsu.core.Task.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/core/#retsu.core.Task.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/core/#retsu.core.Task.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/core/#retsu.core.TaskManager","title":"TaskManager","text":"<pre><code>TaskManager()\n</code></pre> <p>Manage tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Create a list of retsu tasks.\"\"\"\n    self.tasks: dict[str, Task] = {}\n</code></pre>"},{"location":"api/core/#retsu.core.TaskManager.get_task","title":"get_task","text":"<pre><code>get_task(name: str) -&gt; Optional[Task]\n</code></pre> <p>Get a task with the given name.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_task(self, name: str) -&gt; Optional[Task]:\n    \"\"\"Get a task with the given name.\"\"\"\n    return self.tasks.get(name)\n</code></pre>"},{"location":"api/core/#retsu.core.TaskManager.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is starting ...\")\n        task.start()\n</code></pre>"},{"location":"api/core/#retsu.core.TaskManager.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is stopping ...\")\n        task.stop()\n</code></pre>"},{"location":"api/references/","title":"Api references","text":""},{"location":"api/references/#retsu","title":"retsu","text":"<p>Retsu.</p>"},{"location":"api/references/#retsu.ParallelTask","title":"ParallelTask","text":"<pre><code>ParallelTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Initialize a parallel task object.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize ParallelTask.\"\"\"\n    if workers &lt;= 1:\n        raise Exception(\"ParallelTask should have more than 1 worker.\")\n\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/references/#retsu.ParallelTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/references/#retsu.ResultTask","title":"ResultTask","text":"<pre><code>ResultTask(result_path: Path)\n</code></pre> <p>Result from a task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path) -&gt; None:\n    \"\"\"Initialize ResultTask.\"\"\"\n    self.result_path = result_path\n</code></pre>"},{"location":"api/references/#retsu.ResultTask.get","title":"get","text":"<pre><code>get(task_id: str) -&gt; Any\n</code></pre> <p>Return the result for given task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get(self, task_id: str) -&gt; Any:\n    \"\"\"Return the result for given task.\"\"\"\n    if not self.status(task_id):\n        return {\"status\": False, \"message\": \"Result not ready.\"}\n\n    return self.load(task_id)\n</code></pre>"},{"location":"api/references/#retsu.ResultTask.load","title":"load","text":"<pre><code>load(task_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Load the result from a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef load(self, task_id: str) -&gt; dict[str, Any]:\n    \"\"\"Load the result from a file.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    if not result_file.exists():\n        raise Exception(f\"File {result_file} doesn't exist.\")\n    with open(result_file, \"r\") as f:\n        return cast(dict[str, Any], json.load(f))\n</code></pre>"},{"location":"api/references/#retsu.ResultTask.save","title":"save","text":"<pre><code>save(task_id: str, result: Any) -&gt; None\n</code></pre> <p>Save the result in a file.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef save(self, task_id: str, result: Any) -&gt; None:\n    \"\"\"Save the result in a file.\"\"\"\n    with open(self.result_path / f\"{task_id}.json\", \"w\") as f:\n        json.dump(\n            {\"task_id\": task_id, \"result\": result},\n            f,\n            indent=2,\n        )\n</code></pre>"},{"location":"api/references/#retsu.ResultTask.status","title":"status","text":"<pre><code>status(task_id: str) -&gt; bool\n</code></pre> <p>Return if the result for a given task was already stored.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef status(self, task_id: str) -&gt; bool:\n    \"\"\"Return if the result for a given task was already stored.\"\"\"\n    result_file = self.result_path / f\"{task_id}.json\"\n    return result_file.exists()\n</code></pre>"},{"location":"api/references/#retsu.SerialTask","title":"SerialTask","text":"<pre><code>SerialTask(result_path: Path, workers: int = 1)\n</code></pre> <p>               Bases: <code>Task</code></p> <p>Serial Task class.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self, result_path: Path, workers: int = 1) -&gt; None:\n    \"\"\"Initialize a serial task object.\"\"\"\n    if workers != 1:\n        warnings.warn(\n            \"SerialTask should have just 1 worker. \"\n            \"Switching automatically to 1 ...\"\n        )\n        workers = 1\n    super().__init__(result_path, workers=workers)\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.get_result","title":"get_result","text":"<pre><code>get_result(task_id: str) -&gt; Any\n</code></pre> <p>Get the result for given task id.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_result(self, task_id: str) -&gt; Any:\n    \"\"\"Get the result for given task id.\"\"\"\n    return self.result.get(task_id)\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.prepare_task","title":"prepare_task","text":"<pre><code>prepare_task(data: Any) -&gt; None\n</code></pre> <p>Call the task with the necessary arguments.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def prepare_task(self, data: Any) -&gt; None:\n    \"\"\"Call the task with the necessary arguments.\"\"\"\n    self.task(\n        *data[\"args\"],\n        task_id=data[\"task_id\"],\n        **data[\"kwargs\"],\n    )\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.request","title":"request","text":"<pre><code>request(*args, **kwargs) -&gt; str\n</code></pre> <p>Feed the queue with data from the request for the task.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef request(self, *args, **kwargs) -&gt; str:  # type: ignore\n    \"\"\"Feed the queue with data from the request for the task.\"\"\"\n    key = uuid4().hex\n    print(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n    )\n    self.queue_in.put(\n        {\n            \"task_id\": key,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        },\n        block=False,\n    )\n    return key\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the task with data from the queue.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef run(self) -&gt; None:\n    \"\"\"Run the task with data from the queue.\"\"\"\n    while self.active:\n        data = self.queue_in.get()\n        if data is None:\n            print(\"Process terminated.\")\n            self.active = False\n            return\n        self.prepare_task(data)\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start processes.\"\"\"\n    for _ in range(self.workers):\n        p = mp.Process(target=self.run)\n        p.start()\n        self.processes.append(p)\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop processes.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop processes.\"\"\"\n    if not self.active:\n        return\n\n    self.active = False\n\n    for i in range(self.workers):\n        self.queue_in.put(None)\n\n    for i in range(self.workers):\n        p = self.processes[i]\n        p.join()\n\n    self.queue_in.close()\n    self.queue_in.join_thread()\n</code></pre>"},{"location":"api/references/#retsu.SerialTask.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(*args, task_id: str, **kwargs) -&gt; None\n</code></pre> <p>Define the task to be executed.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@abstractmethod\ndef task(self, *args, task_id: str, **kwargs) -&gt; None:  # type: ignore\n    \"\"\"Define the task to be executed.\"\"\"\n    raise Exception(\"`task` not implemented yet.\")\n</code></pre>"},{"location":"api/references/#retsu.TaskManager","title":"TaskManager","text":"<pre><code>TaskManager()\n</code></pre> <p>Manage tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Create a list of retsu tasks.\"\"\"\n    self.tasks: dict[str, Task] = {}\n</code></pre>"},{"location":"api/references/#retsu.TaskManager.get_task","title":"get_task","text":"<pre><code>get_task(name: str) -&gt; Optional[Task]\n</code></pre> <p>Get a task with the given name.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef get_task(self, name: str) -&gt; Optional[Task]:\n    \"\"\"Get a task with the given name.\"\"\"\n    return self.tasks.get(name)\n</code></pre>"},{"location":"api/references/#retsu.TaskManager.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef start(self) -&gt; None:\n    \"\"\"Start tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is starting ...\")\n        task.start()\n</code></pre>"},{"location":"api/references/#retsu.TaskManager.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop tasks.</p> Source code in <code>src/retsu/core.py</code> <pre><code>@public\ndef stop(self) -&gt; None:\n    \"\"\"Stop tasks.\"\"\"\n    for task_name, task in self.tasks.items():\n        print(f\"Task `{task_name}` is stopping ...\")\n        task.stop()\n</code></pre>"},{"location":"api/references/#retsu.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/retsu/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return \"0.0.2\"  # semantic-release\n</code></pre>"},{"location":"api/plugins/","title":"Index","text":""},{"location":"api/plugins/#retsu.plugins","title":"plugins","text":"<p>Sub-package for plugins.</p>"},{"location":"api/plugins/django/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> django","text":""},{"location":"api/plugins/django/#retsu.plugins.django","title":"django","text":"<p>Plugin for integrating with django.</p>"},{"location":"api/plugins/django/#retsu.plugins.django.create_app_config","title":"create_app_config","text":"<pre><code>create_app_config(manager: TaskManager, app_name: str = 'myapp') -&gt; Type[AppConfig]\n</code></pre> <p>Create a django app config class.</p> Source code in <code>src/retsu/plugins/django.py</code> <pre><code>def create_app_config(\n    manager: TaskManager, app_name: str = \"myapp\"\n) -&gt; Type[AppConfig]:\n    \"\"\"Create a django app config class.\"\"\"\n\n    class RetsuAppConfig(AppConfig):\n        \"\"\"RetsuAppConfig class.\"\"\"\n\n        name = app_name\n\n        def ready(self) -&gt; None:\n            \"\"\"Start the task manager when the django app is ready.\"\"\"\n            manager.start()\n            request_finished.connect(self.stop_multiprocessing)\n\n        def stop_multiprocessing(self, **kwargs) -&gt; None:  # type: ignore\n            assert kwargs is not None\n            manager.stop()\n\n    return RetsuAppConfig\n</code></pre>"}]}